{"ast":null,"code":"const conf = require('../conf');\nexports.addInfoHeaders = function (options, info) {\n  const MAX_INFO_HEADERS = conf.MAX_INFO_HEADERS;\n  let invalidKeys = [];\n  if (info) {\n    let keys = Object.keys(info);\n    if (keys.length > MAX_INFO_HEADERS) {\n      throw new Error(`Too many info headers: maximum of ${MAX_INFO_HEADERS} allowed`);\n    }\n    keys.forEach(addInfoHeader);\n    if (invalidKeys.length) {\n      throw new Error('Info header keys contain invalid characters: ' + invalidKeys.join('   '));\n    }\n  }\n  function isValidHeader(header) {\n    return /^[a-z0-9-_]+$/i.test(header);\n  }\n  function addInfoHeader(infoKey) {\n    if (isValidHeader(infoKey)) {\n      const key = 'X-Bz-Info-' + infoKey;\n      options.headers[key] = encodeURIComponent(info[infoKey]);\n    } else {\n      return invalidKeys.push(infoKey);\n    }\n  }\n};\nexports.addBzHeaders = function (headers, targetObj) {\n  const keys = Object.keys(headers);\n  return keys.filter(isBzHeader).map(getKeyObj).map(setKeyValue);\n  function isBzHeader(header) {\n    return /^X-Bz-/i.test(header);\n  }\n  function getKeyObj(header) {\n    const replacement = /^X-Bz-Info-/i.test(header) ? /X-Bz-Info-/i : /X-Bz-/i;\n    return {\n      original: header,\n      header: camelCase(header.replace(replacement, ''))\n    };\n  }\n  function setKeyValue(headerObj) {\n    targetObj[headerObj.header] = headers[headerObj.original];\n  }\n  function camelCase(header) {\n    return header.split('-').map(firstLetterCapitalise).join('');\n  }\n  function firstLetterCapitalise(word, index) {\n    if (index === 0) {\n      // skip first letter\n      return word;\n    }\n    return word[0].toUpperCase() + word.substr(1);\n  }\n};","map":{"version":3,"names":["conf","require","exports","addInfoHeaders","options","info","MAX_INFO_HEADERS","invalidKeys","keys","Object","length","Error","forEach","addInfoHeader","join","isValidHeader","header","test","infoKey","key","headers","encodeURIComponent","push","addBzHeaders","targetObj","filter","isBzHeader","map","getKeyObj","setKeyValue","replacement","original","camelCase","replace","headerObj","split","firstLetterCapitalise","word","index","toUpperCase","substr"],"sources":["/Users/chanakyaratnam/Library/Mobile Documents/com~apple~CloudDocs/Codes/b2-up-down/frontend/node_modules/backblaze-b2/lib/headers.js"],"sourcesContent":["const conf = require('../conf');\n\nexports.addInfoHeaders = function(options, info) {\n    const MAX_INFO_HEADERS = conf.MAX_INFO_HEADERS;\n    let invalidKeys = [];\n    if (info) {\n        let keys = Object.keys(info);\n\n        if (keys.length > MAX_INFO_HEADERS) {\n            throw new Error(`Too many info headers: maximum of ${MAX_INFO_HEADERS} allowed`);\n        }\n\n        keys.forEach(addInfoHeader);\n\n        if (invalidKeys.length) {\n            throw new Error('Info header keys contain invalid characters: ' + invalidKeys.join('   '));\n        }\n    }\n\n    function isValidHeader(header) {\n        return /^[a-z0-9-_]+$/i.test(header);\n    }\n\n    function addInfoHeader(infoKey) {\n        if (isValidHeader(infoKey)) {\n            const key = 'X-Bz-Info-' + infoKey;\n            options.headers[key] = encodeURIComponent(info[infoKey]);\n        } else {\n            return invalidKeys.push(infoKey);\n        }\n    }\n};\n\nexports.addBzHeaders = function(headers, targetObj) {\n    const keys = Object.keys(headers);\n\n    return keys.filter(isBzHeader)\n        .map(getKeyObj)\n        .map(setKeyValue);\n\n    function isBzHeader(header) {\n        return /^X-Bz-/i.test(header);\n    }\n\n    function getKeyObj(header) {\n        const replacement = /^X-Bz-Info-/i.test(header) ? /X-Bz-Info-/i : /X-Bz-/i;\n        return {\n            original: header,\n            header: camelCase(header.replace(replacement, ''))\n        };\n    }\n\n    function setKeyValue(headerObj) {\n        targetObj[headerObj.header] = headers[headerObj.original];\n    }\n\n    function camelCase(header) {\n        return header.split('-')\n            .map(firstLetterCapitalise)\n            .join('');\n    }\n\n    function firstLetterCapitalise(word, index) {\n        if (index === 0) { // skip first letter\n            return word;\n        }\n        return word[0].toUpperCase() + word.substr(1);\n    }\n};\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE/BC,OAAO,CAACC,cAAc,GAAG,UAASC,OAAO,EAAEC,IAAI,EAAE;EAC7C,MAAMC,gBAAgB,GAAGN,IAAI,CAACM,gBAAgB;EAC9C,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIF,IAAI,EAAE;IACN,IAAIG,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACH,IAAI,CAAC;IAE5B,IAAIG,IAAI,CAACE,MAAM,GAAGJ,gBAAgB,EAAE;MAChC,MAAM,IAAIK,KAAK,CAAC,qCAAqCL,gBAAgB,UAAU,CAAC;IACpF;IAEAE,IAAI,CAACI,OAAO,CAACC,aAAa,CAAC;IAE3B,IAAIN,WAAW,CAACG,MAAM,EAAE;MACpB,MAAM,IAAIC,KAAK,CAAC,+CAA+C,GAAGJ,WAAW,CAACO,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9F;EACJ;EAEA,SAASC,aAAaA,CAACC,MAAM,EAAE;IAC3B,OAAO,gBAAgB,CAACC,IAAI,CAACD,MAAM,CAAC;EACxC;EAEA,SAASH,aAAaA,CAACK,OAAO,EAAE;IAC5B,IAAIH,aAAa,CAACG,OAAO,CAAC,EAAE;MACxB,MAAMC,GAAG,GAAG,YAAY,GAAGD,OAAO;MAClCd,OAAO,CAACgB,OAAO,CAACD,GAAG,CAAC,GAAGE,kBAAkB,CAAChB,IAAI,CAACa,OAAO,CAAC,CAAC;IAC5D,CAAC,MAAM;MACH,OAAOX,WAAW,CAACe,IAAI,CAACJ,OAAO,CAAC;IACpC;EACJ;AACJ,CAAC;AAEDhB,OAAO,CAACqB,YAAY,GAAG,UAASH,OAAO,EAAEI,SAAS,EAAE;EAChD,MAAMhB,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACY,OAAO,CAAC;EAEjC,OAAOZ,IAAI,CAACiB,MAAM,CAACC,UAAU,CAAC,CACzBC,GAAG,CAACC,SAAS,CAAC,CACdD,GAAG,CAACE,WAAW,CAAC;EAErB,SAASH,UAAUA,CAACV,MAAM,EAAE;IACxB,OAAO,SAAS,CAACC,IAAI,CAACD,MAAM,CAAC;EACjC;EAEA,SAASY,SAASA,CAACZ,MAAM,EAAE;IACvB,MAAMc,WAAW,GAAG,cAAc,CAACb,IAAI,CAACD,MAAM,CAAC,GAAG,aAAa,GAAG,QAAQ;IAC1E,OAAO;MACHe,QAAQ,EAAEf,MAAM;MAChBA,MAAM,EAAEgB,SAAS,CAAChB,MAAM,CAACiB,OAAO,CAACH,WAAW,EAAE,EAAE,CAAC;IACrD,CAAC;EACL;EAEA,SAASD,WAAWA,CAACK,SAAS,EAAE;IAC5BV,SAAS,CAACU,SAAS,CAAClB,MAAM,CAAC,GAAGI,OAAO,CAACc,SAAS,CAACH,QAAQ,CAAC;EAC7D;EAEA,SAASC,SAASA,CAAChB,MAAM,EAAE;IACvB,OAAOA,MAAM,CAACmB,KAAK,CAAC,GAAG,CAAC,CACnBR,GAAG,CAACS,qBAAqB,CAAC,CAC1BtB,IAAI,CAAC,EAAE,CAAC;EACjB;EAEA,SAASsB,qBAAqBA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACxC,IAAIA,KAAK,KAAK,CAAC,EAAE;MAAE;MACf,OAAOD,IAAI;IACf;IACA,OAAOA,IAAI,CAAC,CAAC,CAAC,CAACE,WAAW,CAAC,CAAC,GAAGF,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC;EACjD;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}