{"ast":null,"code":"var _jsxFileName = \"/Users/chanakyaratnam/Library/Mobile Documents/com~apple~CloudDocs/Codes/b2-up-down/frontend/src/components/FolderSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './FolderSelector.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst B2_CONFIG = {\n  keyId: '005eb77b989a2b70000000006',\n  applicationKey: 'K005oTpW9P0cUAyBSZPLJsta50Bu0jQ',\n  bucketId: '3ebbc707abc9d8399a320b17',\n  bucketName: 'plr-assets',\n  s3ApiUrl: 'https://s3.us-west-004.backblazeb2.com'\n};\nfunction FolderSelector({\n  onSelect,\n  selectedFolder\n}) {\n  _s();\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n  const fetchFolders = async () => {\n    try {\n      setLoading(true);\n\n      // Create AWS-style signature headers\n      const dateStamp = new Date().toISOString().split('T')[0];\n      const authString = Buffer.from(`${B2_CONFIG.keyId}:${B2_CONFIG.applicationKey}`).toString('base64');\n\n      // List objects using S3-compatible API\n      const response = await axios({\n        method: 'GET',\n        url: `${B2_CONFIG.s3ApiUrl}/${B2_CONFIG.bucketName}`,\n        params: {\n          'list-type': '2',\n          'delimiter': '/'\n        },\n        headers: {\n          'Authorization': `Basic ${authString}`,\n          'Date': dateStamp,\n          'x-amz-date': dateStamp\n        }\n      });\n\n      // Parse XML response to get folders\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n\n      // Get both CommonPrefixes (folders) and files that might be in folders\n      const commonPrefixes = Array.from(xmlDoc.getElementsByTagName('CommonPrefix')).map(prefix => prefix.getElementsByTagName('Prefix')[0].textContent.replace(/\\/$/, ''));\n      const contents = Array.from(xmlDoc.getElementsByTagName('Contents')).map(content => {\n        const key = content.getElementsByTagName('Key')[0].textContent;\n        const folderPath = key.split('/').slice(0, -1).join('/');\n        return folderPath;\n      }).filter(path => path !== '');\n\n      // Combine and deduplicate folders\n      const uniqueFolders = new Set([...commonPrefixes, ...contents]);\n      const sortedFolders = Array.from(uniqueFolders).sort();\n      setFolders(['root', ...sortedFolders]);\n      setError(null);\n    } catch (error) {\n      console.error('Folder fetch error:', error);\n      setError('Failed to fetch folders. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSelect = folder => {\n    onSelect(folder === 'root' ? '' : folder);\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"folder-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"folder-selector-trigger\",\n      onClick: () => setIsOpen(!isOpen),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: selectedFolder || 'Select Folder'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"arrow\",\n        children: \"\\u25BC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-list\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-item loading\",\n        children: \"Loading folders...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-item error\",\n        onClick: fetchFolders,\n        children: [error, \" (Click to retry)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this) : folders.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-item\",\n        children: \"No folders found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this) : folders.map(folder => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `folder-item ${selectedFolder === folder ? 'selected' : ''}`,\n        onClick: () => handleSelect(folder),\n        children: [\"\\uD83D\\uDCC1 \", folder || 'root']\n      }, folder, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(FolderSelector, \"ElG9iVJQT/NjUST/ZO60NxNS8vc=\");\n_c = FolderSelector;\nexport default FolderSelector;\nvar _c;\n$RefreshReg$(_c, \"FolderSelector\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","B2_CONFIG","keyId","applicationKey","bucketId","bucketName","s3ApiUrl","FolderSelector","onSelect","selectedFolder","_s","folders","setFolders","loading","setLoading","error","setError","isOpen","setIsOpen","fetchFolders","dateStamp","Date","toISOString","split","authString","Buffer","from","toString","response","method","url","params","headers","parser","DOMParser","xmlDoc","parseFromString","data","commonPrefixes","Array","getElementsByTagName","map","prefix","textContent","replace","contents","content","key","folderPath","slice","join","filter","path","uniqueFolders","Set","sortedFolders","sort","console","handleSelect","folder","className","children","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["/Users/chanakyaratnam/Library/Mobile Documents/com~apple~CloudDocs/Codes/b2-up-down/frontend/src/components/FolderSelector.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './FolderSelector.css';\n\nconst B2_CONFIG = {\n  keyId: '005eb77b989a2b70000000006',\n  applicationKey: 'K005oTpW9P0cUAyBSZPLJsta50Bu0jQ',\n  bucketId: '3ebbc707abc9d8399a320b17',\n  bucketName: 'plr-assets',\n  s3ApiUrl: 'https://s3.us-west-004.backblazeb2.com'\n};\n\nfunction FolderSelector({ onSelect, selectedFolder }) {\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n\n  const fetchFolders = async () => {\n    try {\n      setLoading(true);\n\n      // Create AWS-style signature headers\n      const dateStamp = new Date().toISOString().split('T')[0];\n      const authString = Buffer.from(`${B2_CONFIG.keyId}:${B2_CONFIG.applicationKey}`).toString('base64');\n\n      // List objects using S3-compatible API\n      const response = await axios({\n        method: 'GET',\n        url: `${B2_CONFIG.s3ApiUrl}/${B2_CONFIG.bucketName}`,\n        params: {\n          'list-type': '2',\n          'delimiter': '/'\n        },\n        headers: {\n          'Authorization': `Basic ${authString}`,\n          'Date': dateStamp,\n          'x-amz-date': dateStamp\n        }\n      });\n\n      // Parse XML response to get folders\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(response.data, \"text/xml\");\n      \n      // Get both CommonPrefixes (folders) and files that might be in folders\n      const commonPrefixes = Array.from(xmlDoc.getElementsByTagName('CommonPrefix')).map(\n        prefix => prefix.getElementsByTagName('Prefix')[0].textContent.replace(/\\/$/, '')\n      );\n      \n      const contents = Array.from(xmlDoc.getElementsByTagName('Contents')).map(\n        content => {\n          const key = content.getElementsByTagName('Key')[0].textContent;\n          const folderPath = key.split('/').slice(0, -1).join('/');\n          return folderPath;\n        }\n      ).filter(path => path !== '');\n\n      // Combine and deduplicate folders\n      const uniqueFolders = new Set([...commonPrefixes, ...contents]);\n      const sortedFolders = Array.from(uniqueFolders).sort();\n\n      setFolders(['root', ...sortedFolders]);\n      setError(null);\n    } catch (error) {\n      console.error('Folder fetch error:', error);\n      setError('Failed to fetch folders. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSelect = (folder) => {\n    onSelect(folder === 'root' ? '' : folder);\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"folder-selector\">\n      <button \n        type=\"button\"\n        className=\"folder-selector-trigger\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <span>{selectedFolder || 'Select Folder'}</span>\n        <span className=\"arrow\">▼</span>\n      </button>\n      \n      {isOpen && (\n        <div className=\"folder-list\">\n          {loading ? (\n            <div className=\"folder-item loading\">Loading folders...</div>\n          ) : error ? (\n            <div className=\"folder-item error\" onClick={fetchFolders}>\n              {error} (Click to retry)\n            </div>\n          ) : folders.length === 0 ? (\n            <div className=\"folder-item\">No folders found</div>\n          ) : (\n            folders.map(folder => (\n              <div\n                key={folder}\n                className={`folder-item ${selectedFolder === folder ? 'selected' : ''}`}\n                onClick={() => handleSelect(folder)}\n              >\n                📁 {folder || 'root'}\n              </div>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default FolderSelector; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}