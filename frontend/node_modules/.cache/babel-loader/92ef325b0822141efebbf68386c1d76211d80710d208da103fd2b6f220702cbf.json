{"ast":null,"code":"var _jsxFileName = \"/Users/chanakyaratnam/Library/Mobile Documents/com~apple~CloudDocs/Codes/b2-up-down/frontend/src/components/FolderSelector.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './FolderSelector.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FolderSelector({\n  onSelect,\n  selectedFolder\n}) {\n  _s();\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n  const fetchFolders = async () => {\n    try {\n      const response = await fetch('http://localhost:5005/folders');\n      const data = await response.json();\n      if (response.ok) {\n        setFolders(['root', ...data.folders]);\n      } else {\n        setError(data.error);\n      }\n    } catch (error) {\n      setError('Failed to fetch folders');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleSelect = folder => {\n    onSelect(folder === 'root' ? '' : folder);\n    setIsOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"folder-selector\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"folder-selector-trigger\",\n      onClick: () => setIsOpen(!isOpen),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: selectedFolder || 'Select Folder'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"arrow\",\n        children: \"\\u25BC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"folder-list\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-item loading\",\n        children: \"Loading folders...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"folder-item error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this) : folders.map(folder => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `folder-item ${selectedFolder === folder ? 'selected' : ''}`,\n        onClick: () => handleSelect(folder),\n        children: [\"\\uD83D\\uDCC1 \", folder || 'root']\n      }, folder, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n}\n_s(FolderSelector, \"ElG9iVJQT/NjUST/ZO60NxNS8vc=\");\n_c = FolderSelector;\nexport default FolderSelector;\nvar _c;\n$RefreshReg$(_c, \"FolderSelector\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FolderSelector","onSelect","selectedFolder","_s","folders","setFolders","loading","setLoading","error","setError","isOpen","setIsOpen","fetchFolders","response","fetch","data","json","ok","handleSelect","folder","className","children","type","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/chanakyaratnam/Library/Mobile Documents/com~apple~CloudDocs/Codes/b2-up-down/frontend/src/components/FolderSelector.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './FolderSelector.css';\n\nfunction FolderSelector({ onSelect, selectedFolder }) {\n  const [folders, setFolders] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    fetchFolders();\n  }, []);\n\n  const fetchFolders = async () => {\n    try {\n      const response = await fetch('http://localhost:5005/folders');\n      const data = await response.json();\n      \n      if (response.ok) {\n        setFolders(['root', ...data.folders]);\n      } else {\n        setError(data.error);\n      }\n    } catch (error) {\n      setError('Failed to fetch folders');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSelect = (folder) => {\n    onSelect(folder === 'root' ? '' : folder);\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"folder-selector\">\n      <button \n        type=\"button\"\n        className=\"folder-selector-trigger\"\n        onClick={() => setIsOpen(!isOpen)}\n      >\n        <span>{selectedFolder || 'Select Folder'}</span>\n        <span className=\"arrow\">‚ñº</span>\n      </button>\n      \n      {isOpen && (\n        <div className=\"folder-list\">\n          {loading ? (\n            <div className=\"folder-item loading\">Loading folders...</div>\n          ) : error ? (\n            <div className=\"folder-item error\">{error}</div>\n          ) : (\n            folders.map(folder => (\n              <div\n                key={folder}\n                className={`folder-item ${selectedFolder === folder ? 'selected' : ''}`}\n                onClick={() => handleSelect(folder)}\n              >\n                üìÅ {folder || 'root'}\n              </div>\n            ))\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default FolderSelector; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}